{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 56}, "tests": {"0": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 6\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_base_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_get_200_ok", "rerun": "0"}, "1": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 23\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_base_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_get_401_unauthorized", "rerun": "0"}, "2": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 40\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_base_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_get_404_not_found", "rerun": "0"}, "3": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 58\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_base_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_post_200_ok", "rerun": "0"}, "4": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 80\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_base_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_post_401_unauthorized", "rerun": "0"}, "5": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 102\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_base_post_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_post_422_data_error", "rerun": "0"}, "6": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 124\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_base_post_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_post_404_not_found", "rerun": "0"}, "7": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 147\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_base_put_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_put_200_ok", "rerun": "0"}, "8": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 169\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_base_put_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_put_401_unauthorized", "rerun": "0"}, "9": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 191\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_base_put_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_put_422_data_error", "rerun": "0"}, "10": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 213\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_base_put_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_put_404_not_found", "rerun": "0"}, "11": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 236\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_base_delte_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_delte_200_ok", "rerun": "0"}, "12": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 253\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_base_delete_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_delete_401_unauthorized", "rerun": "0"}, "13": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 270\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_base_delete_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_base_delete_404_not_found", "rerun": "0"}, "14": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 290\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_accademics_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_get_200_ok", "rerun": "0"}, "15": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 307\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_accademics_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_get_401_unauthorized", "rerun": "0"}, "16": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 324\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_accademics_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_get_404_not_found", "rerun": "0"}, "17": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 342\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_accademics_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_post_200_ok", "rerun": "0"}, "18": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 364\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_accademics_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_post_401_unauthorized", "rerun": "0"}, "19": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 386\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_accademics_post_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_post_422_data_error", "rerun": "0"}, "20": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 408\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_accademics_post_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_post_404_not_found", "rerun": "0"}, "21": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 431\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_accademics_put_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_put_200_ok", "rerun": "0"}, "22": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 453\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_accademics_put_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_put_401_unauthorized", "rerun": "0"}, "23": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 475\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_accademics_put_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_put_422_data_error", "rerun": "0"}, "24": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 497\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_accademics_put_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_put_404_not_found", "rerun": "0"}, "25": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 520\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_accademics_delte_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_delte_200_ok", "rerun": "0"}, "26": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 537\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_accademics_delete_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_delete_401_unauthorized", "rerun": "0"}, "27": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 554\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_accademics_delete_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_accademics_delete_404_not_found", "rerun": "0"}, "28": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 574\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_researcher_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_get_200_ok", "rerun": "0"}, "29": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 591\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_researcher_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_get_401_unauthorized", "rerun": "0"}, "30": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 608\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_researcher_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_get_404_not_found", "rerun": "0"}, "31": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 626\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_researcher_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_post_200_ok", "rerun": "0"}, "32": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 648\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_researcher_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_post_401_unauthorized", "rerun": "0"}, "33": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 670\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_researcher_post_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_post_422_data_error", "rerun": "0"}, "34": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 692\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_researcher_post_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_post_404_not_found", "rerun": "0"}, "35": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 715\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_researcher_put_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_put_200_ok", "rerun": "0"}, "36": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 737\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_researcher_put_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_put_401_unauthorized", "rerun": "0"}, "37": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 759\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_researcher_put_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_put_422_data_error", "rerun": "0"}, "38": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 781\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_researcher_put_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_put_404_not_found", "rerun": "0"}, "39": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 804\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_researcher_delte_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_delte_200_ok", "rerun": "0"}, "40": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 821\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_researcher_delete_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_delete_401_unauthorized", "rerun": "0"}, "41": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 838\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_researcher_delete_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_researcher_delete_404_not_found", "rerun": "0"}, "42": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 858\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_work_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_get_200_ok", "rerun": "0"}, "43": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 875\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_work_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_get_401_unauthorized", "rerun": "0"}, "44": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 892\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_work_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_get_404_not_found", "rerun": "0"}, "45": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 910\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_work_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_post_200_ok", "rerun": "0"}, "46": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 932\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_work_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_post_401_unauthorized", "rerun": "0"}, "47": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 954\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_work_post_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_post_422_data_error", "rerun": "0"}, "48": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 976\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_work_post_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_post_404_not_found", "rerun": "0"}, "49": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 999\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_work_put_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_put_200_ok", "rerun": "0"}, "50": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 1021\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_work_put_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_put_401_unauthorized", "rerun": "0"}, "51": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 1043\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_work_put_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_put_422_data_error", "rerun": "0"}, "52": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 1065\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_work_put_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_put_404_not_found", "rerun": "0"}, "53": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 1088\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_work_delte_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_delte_200_ok", "rerun": "0"}, "54": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 1105\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_work_delete_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_delete_401_unauthorized", "rerun": "0"}, "55": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/profile_test.py, line 1122\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_work_delete_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_work_delete_404_not_found", "rerun": "0"}}, "suite_name": "tests/integration/profile_test.py"}, "1": {"suite_name": "tests/integration/registry_test.py", "tests": {"0": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 6\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_registry_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_get_200_ok", "rerun": "0"}, "1": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 23\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_registry_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_get_401_unauthorized", "rerun": "0"}, "2": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 40\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_registry_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_get_404_not_found", "rerun": "0"}, "3": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 58\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_registry_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_post_200_ok", "rerun": "0"}, "4": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 80\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_registry_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_post_401_unauthorized", "rerun": "0"}, "5": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 102\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_registry_post_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_post_422_data_error", "rerun": "0"}, "6": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 124\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_registry_post_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_post_404_not_found", "rerun": "0"}, "7": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 147\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_registry_put_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_put_200_ok", "rerun": "0"}, "8": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 169\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_registry_put_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_put_401_unauthorized", "rerun": "0"}, "9": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 191\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_registry_put_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_put_422_data_error", "rerun": "0"}, "10": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 213\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_registry_put_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_registry_put_404_not_found", "rerun": "0"}, "11": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 238\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_login_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_get_200_ok", "rerun": "0"}, "12": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 255\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_login_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_get_401_unauthorized", "rerun": "0"}, "13": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 272\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_login_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_get_404_not_found", "rerun": "0"}, "14": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 290\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_login_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_post_200_ok", "rerun": "0"}, "15": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 312\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_login_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_post_401_unauthorized", "rerun": "0"}, "16": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 334\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_login_post_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_post_422_data_error", "rerun": "0"}, "17": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 356\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_login_post_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_post_404_not_found", "rerun": "0"}, "18": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 379\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_login_put_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_put_200_ok", "rerun": "0"}, "19": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 401\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_login_put_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_put_401_unauthorized", "rerun": "0"}, "20": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 423\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_login_put_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_put_422_data_error", "rerun": "0"}, "21": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 445\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_login_put_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_put_404_not_found", "rerun": "0"}, "22": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 468\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_login_delte_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_delte_200_ok", "rerun": "0"}, "23": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 485\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_login_delete_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_delete_401_unauthorized", "rerun": "0"}, "24": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 502\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_login_delete_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_login_delete_404_not_found", "rerun": "0"}, "25": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 522\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_logout_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_logout_get_200_ok", "rerun": "0"}, "26": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 539\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_logout_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_logout_get_401_unauthorized", "rerun": "0"}, "27": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 556\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_logout_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_logout_get_404_not_found", "rerun": "0"}, "28": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 574\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_logout_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_logout_post_200_ok", "rerun": "0"}, "29": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 596\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_logout_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_logout_post_401_unauthorized", "rerun": "0"}, "30": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 618\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_logout_post_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_logout_post_422_data_error", "rerun": "0"}, "31": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 640\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_logout_post_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_logout_post_404_not_found", "rerun": "0"}, "32": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 665\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_reset_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_reset_get_200_ok", "rerun": "0"}, "33": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 682\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_reset_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_reset_get_401_unauthorized", "rerun": "0"}, "34": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 699\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_reset_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_reset_get_404_not_found", "rerun": "0"}, "35": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 717\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_reset_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_reset_post_200_ok", "rerun": "0"}, "36": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 739\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_reset_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_reset_post_401_unauthorized", "rerun": "0"}, "37": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 761\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_reset_post_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_reset_post_422_data_error", "rerun": "0"}, "38": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/registry_test.py, line 783\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_reset_post_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_reset_post_404_not_found", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 39}}, "2": {"suite_name": "tests/integration/smoke_test.py", "tests": {"0": {"status": "ERROR", "message": "request = <SubRequest 'request_data' for <Function test_get_demo_filter>>\n\n    @pytest.fixture(scope=\"session\")\n    def request_data(request: TypeVar) -> dict[str, str | dict[str, str]]:\n        # get request data file from different env\n        env = os.getenv(\"ENV\", \"dev\")\n>       with open(f\"data/{env}_request_data.json\", \"r\") as request_data_file:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'data/dev_request_data.json'\n\ntests/integration/conftest.py:26: FileNotFoundError\n", "test_name": "test_get_demo_filter", "rerun": "0"}, "1": {"status": "ERROR", "message": "request = <SubRequest 'request_data' for <Function test_get_demo_filter>>\n\n    @pytest.fixture(scope=\"session\")\n    def request_data(request: TypeVar) -> dict[str, str | dict[str, str]]:\n        # get request data file from different env\n        env = os.getenv(\"ENV\", \"dev\")\n>       with open(f\"data/{env}_request_data.json\", \"r\") as request_data_file:\nE       FileNotFoundError: [Errno 2] No such file or directory: 'data/dev_request_data.json'\n\ntests/integration/conftest.py:26: FileNotFoundError\n", "test_name": "test_post_demo_filter", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}}, "3": {"suite_name": "tests/integration/user_test.py", "tests": {"0": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 6\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_award_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_get_200_ok", "rerun": "0"}, "1": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 23\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_award_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_get_401_unauthorized", "rerun": "0"}, "2": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 40\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_award_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_get_404_not_found", "rerun": "0"}, "3": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 58\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_award_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_post_200_ok", "rerun": "0"}, "4": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 80\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_award_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_post_401_unauthorized", "rerun": "0"}, "5": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 102\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_award_post_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_post_422_data_error", "rerun": "0"}, "6": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 124\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_award_post_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_post_404_not_found", "rerun": "0"}, "7": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 147\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_award_put_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_put_200_ok", "rerun": "0"}, "8": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 169\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_award_put_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_put_401_unauthorized", "rerun": "0"}, "9": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 191\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_award_put_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_put_422_data_error", "rerun": "0"}, "10": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 213\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_award_put_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_put_404_not_found", "rerun": "0"}, "11": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 236\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_award_delte_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_delte_200_ok", "rerun": "0"}, "12": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 253\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_award_delete_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_delete_401_unauthorized", "rerun": "0"}, "13": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 270\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_award_delete_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_award_delete_404_not_found", "rerun": "0"}, "14": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 290\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_social_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_get_200_ok", "rerun": "0"}, "15": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 307\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_social_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_get_401_unauthorized", "rerun": "0"}, "16": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 324\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_social_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_get_404_not_found", "rerun": "0"}, "17": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 342\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_social_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_post_200_ok", "rerun": "0"}, "18": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 364\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_social_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_post_401_unauthorized", "rerun": "0"}, "19": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 386\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_social_post_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_post_422_data_error", "rerun": "0"}, "20": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 408\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_social_post_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_post_404_not_found", "rerun": "0"}, "21": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 431\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_social_put_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_put_200_ok", "rerun": "0"}, "22": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 453\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_social_put_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_put_401_unauthorized", "rerun": "0"}, "23": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 475\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_social_put_422_data_error(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_put_422_data_error", "rerun": "0"}, "24": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 497\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_social_put_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_put_404_not_found", "rerun": "0"}, "25": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 520\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_social_delte_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_delte_200_ok", "rerun": "0"}, "26": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 537\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_social_delete_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_delete_401_unauthorized", "rerun": "0"}, "27": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 554\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_social_delete_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_social_delete_404_not_found", "rerun": "0"}, "28": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 574\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_profile_get_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_profile_get_200_ok", "rerun": "0"}, "29": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 591\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_profile_get_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_profile_get_401_unauthorized", "rerun": "0"}, "30": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 608\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_profile_get_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_profile_get_404_not_found", "rerun": "0"}, "31": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 626\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_profile_post_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_profile_post_200_ok", "rerun": "0"}, "32": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 648\n      @pytest.mark.Smoke  # mark the test case as smoke\n      def test_profile_post_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_profile_post_401_unauthorized", "rerun": "0"}, "33": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 671\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_profile_delte_200_ok(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_profile_delte_200_ok", "rerun": "0"}, "34": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 688\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_profile_delete_401_unauthorized(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_profile_delete_401_unauthorized", "rerun": "0"}, "35": {"status": "ERROR", "message": "file /home/johnmba/dotspot/Account/tests/integration/user_test.py, line 705\n      @pytest.mark.Regression  # mark the test case as regression\n      def test_profile_delete_404_not_found(\nfile /home/johnmba/dotspot/Account/tests/integration/conftest.py, line 42\n  @pytest.fixture(scope=\"session\")\n  def header(token: str) -> dict[str, str]:\nE       fixture 'token' not found\n>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, env_config, header, mock_session, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, request_data, response_data, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n>       use 'pytest --fixtures [testpath]' for help on them.\n\n/home/johnmba/dotspot/Account/tests/integration/conftest.py:42\n", "test_name": "test_profile_delete_404_not_found", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 36}}}}, "date": "July 31, 2024", "start_time": 1722460352.70506, "total_suite": 4, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "133", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "133"}